cmake_minimum_required(VERSION 3.5)

project(LIBARRAYFIRE_DDSL)

option(DDSL_EXT_LIB_AF "ArrayFire support in DDSL_TESTER" OFF)
option(BUILD_LIBAF_DDSL "Build a library for ArrayFire" OFF) 				#Depend on: DDSL_EXT_LIB_AF

#function (addExtLibAF)
#        message("* addExtLibAF")
#        list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")

#        if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
#                set (AF_ROOT "C:/Program Files/ArrayFire/v3")
#                if (OPTION_CUDA_GPU)
#                        target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/afcuda.lib)
#                else()
#                        target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/afcpu.lib)
#                endif()
#        else()
#                set (AF_ROOT "/usr/local/arrayfire-3")
#                if (OPTION_AF_GPU)
#                        target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/libafcuda.so)
#                        message("** OPTION_AF_GPU=1")
#                else()
#                        target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/libafcpu.so)
#                        message("** OPTION_AF_GPU=0")
#                endif()
#        endif()

#        set (AF_INCLUDE_DIRS ${AF_ROOT}/include)
#        include_directories (${AF_INCLUDE_DIRS})
#        set(DEFS ${DEFS} PARENT_SCOPE)
#endfunction()
#function (addLibAF)
#        message("* addLibAF")
#        list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")
#        include_directories (${DDSL_ROOT}/libarrayfire_ddsl)

#        if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
#                set (AF_ROOT "C:/Program Files/ArrayFire/v3")
#                target_link_libraries(${EXE_NAME} debug ${DDSL_ROOT}/build/Debug/af_ddsl.lib optimized ${DDSL_ROOT}/build/Release/af_ddsl.lib)
#        else()
#                set (AF_ROOT "/usr/local/arrayfire-3")
#                target_link_libraries(${EXE_NAME} ${CMAKE_BINARY_DIR}/libaf_ddsl.a)
#        endif()
#        set(DEFS ${DEFS} PARENT_SCOPE)
#endfunction()
#function(addExtAF)
#    list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")
#    find_package(ArrayFire REQUIRED)
#    find_package(CUDA)
#    if (OPTION_CUDA_GPU AND ${ArrayFire_CUDA_FOUND} AND ${CUDA_FOUND})
#        target_link_libraries(${EXE_NAME} ${ArrayFire_CUDA_LIBRARIES} ${CUDA_LIBRARIES})
#    elseif(${ArrayFire_CPU_FOUND})
#        target_link_libraries(${EXE_NAME} ${ArrayFire_CPU_LIBRARIES})
#    endif()
#    set(DEFS ${DEFS} PARENT_SCOPE)
#endfunction()
#function(addAF)
#    message("* addAF")
#    list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")
#    include_directories (${DDSL_ROOT}/libarrayfire_ddsl)
#    find_package(ArrayFire REQUIRED)
#    include_directories(${ArrayFire_INCLUDE_DIRS})
#    target_link_libraries(${EXE_NAME} ${ArrayFire_LIBRARIES})
#    set(DEFS ${DEFS} PARENT_SCOPE)
#endfunction()

if (BUILD_LIBAF_DDSL)
        set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ArrayFire_ddsl.cpp")
        list(APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ArrayFire_ddsl.h")
        set (EXE_NAME "af_ddsl")
        message("Make lib ${EXE_NAME}")

        add_ddsl_h_files()
        add_ddsl_hpp_files()
        add_library(${EXE_NAME} STATIC ${SRC_FILES})
        add_ddsl_h_groups()
        add_ddsl_hpp_groups()

        set(DEFS ${DEFAULT_DEFS})
        addExtAF()
        install(TARGETS ${EXE_NAME} DESTINATION lib)
        install(FILES ${CMAKE_CURRENT_LIST_DIR}/ArrayFire_ddsl.h DESTINATION include/ddsl)
        set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

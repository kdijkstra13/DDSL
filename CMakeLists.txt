cmake_minimum_required(VERSION 2.6)

project(DDSL)

#Compiler flags
option(CLANG "Use the Clang compiler" OFF)
option(DDSL_EXT_LIB "Use external libraries" ON) #Disabling all external libraries in all projects is usually not a good idea
option(DDSL_EXT_LIB_PNG "PNG support" ON)
option(DDSL_EXT_LIB_SVM "SVM support" ON)
option(DDSL_EXT_LIB_AF "ArrayFire support" ON)
option(DDSL_EXT_LIB_CAFFE "Caffe support" ON)
option(DDSL_CUDA_GPU "Build with GPU support" OFF)
option(DDSL_CUDA_NCCL "Multi-GPU support" OFF)

#Projects
option(BUILD_DDSL_NO_EXT_LIB "Build vanilla DDSL" ON) 						#Depend on: None
option(BUILD_DDSL_TESTER "Build testing project for debugging DDSL" ON) 	#Depend on: Any (See ddsl.hpp and ddsl.h)
option(BUILD_LIBPNG_DDSL "Build a library for PNG" ON) 						#Depend on: DDSL_EXT_LIB_PNG
option(BUILD_LIBSVM_DDSL "Build a library for SVM" ON) 						#Depend on: DDSL_EXT_LIB_SVM
option(BUILD_LIBAF_DDSL "Build a library for ArrayFire" ON) 				#Depend on: DDSL_EXT_LIB_AF
option(BUILD_LIBCAFFE_DDSL "Build a library for Caffe" ON) 					#Depend on: DDSL_EXT_LIB_CAFFE
option(BUILD_LIB_DDSL "Build DDSL as a static library" OFF) 				#Depricated/unmaintained use header file code instead

#compiler options
option(BUILD_GCC_O3 "Build using -O3 optimization" OFF)
option(BUILD_GCC_Ofast "Build using OFast optimization" ON)

#Specify global build parameters
if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -bigobj -MD -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
	set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++14 -bigobj -MD -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
else()
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++14 -march=native -fPIC -Wno-unused-result")
	set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -pthread -std=c++14 -march=native -Wall -fPIC -Wno-unused-function -Wno-unused-result" )
	if (BUILD_GCC_O3)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
		set (CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -O3")
		message("Added -O3")
	endif()
	if (BUILD_GCC_Ofast)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ofast")
		set (CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -Ofast")
		message("Added -Ofast")
	endif()
endif()

#Set flags for using external libraries
if (NOT DDSL_EXT_LIB)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDDSL_NO_EXT_LIB" )
	set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDDSL_NO_EXT_LIB" )
else()
	if (NOT DDSL_EXT_LIB_PNG)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDDSL_NO_EXT_LIB_PNG" )
		set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDDSL_NO_EXT_LIB_PNG" )
	else()
		if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
			set(ZLIB_ROOT ${CMAKE_CURRENT_LIST_DIR}/contrib/zlib-1.2.8)
			find_package(ZLIB REQUIRED)
			
			#find_package cannot work with Windows (PNG_ROOT cannot be set)
			set(PNG_INCLUDE_DIRS ${CMAKE_CURRENT_LIST_DIR}/contrib/lpng1628)
			set(PNG_LIBRARIES ${CMAKE_CURRENT_LIST_DIR}/contrib/lpng1628/libpng16.lib)
			message(${PNG_INCLUDE_DIRS})
			message(${PNG_LIBRARIES})
		else()
			#sudo apt-get libpng-dev
			find_package(ZLIB REQUIRED)
			find_package(PNG REQUIRED)
		endif()
	endif()
	if (NOT DDSL_EXT_LIB_SVM)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDDSL_NO_EXT_LIB_SVM" )
		set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDDSL_NO_EXT_LIB_SVM" )
	endif()
	if (NOT DDSL_EXT_LIB_CAFFE)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDDSL_NO_EXT_LIB_CAFFE" )
		set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDDSL_NO_EXT_LIB_CAFFE" )
	else()
		if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)			
			set (OpenCV_DIR ${CMAKE_CURRENT_LIST_DIR}/contrib/caffe/build/libraries)
			find_package(OpenCV REQUIRED)
			set (Caffe_DIR ${CMAKE_CURRENT_LIST_DIR}/contrib/caffe/build)
			find_package(Caffe REQUIRED)
			
			#Add some extra libs
			set(Caffe_LIBRARIES ${Caffe_LIBRARIES} ntdll.lib)
			set(Caffe_LIBRARIES ${Caffe_LIBRARIES} shlwapi.lib)
		else()
			find_package(OpenCV REQUIRED)
			set (Caffe_DIR ${CMAKE_CURRENT_LIST_DIR}/contrib/caffe/build)
			find_package(Caffe REQUIRED)
		endif()
		
		if (NOT DDSL_CUDA_GPU)
			set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCPU_ONLY" )
			set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DCPU_ONLY" )
		else()
			if (DDSL_CUDA_NCCL)
				set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_NCCL")
				set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DUSE_NCCL")
			endif()
		endif()
	endif()
	if (NOT DDSL_EXT_LIB_AF)
		#sudo apt-get install libglfw3-dev libnnvm-dev
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDDSL_NO_EXT_LIB_AF")
		set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDDSL_NO_EXT_LIB_AF" )
	else()
		if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
			set (AF_ROOT "C:/Program Files/ArrayFire/v3")
		else()
			set (AF_ROOT "/usr/local/arrayfire-3")
		endif()
		message(${AF_ROOT})
	endif()
endif()

if (CLANG)
  set (CMAKE_C_COMPILER clang )
  set (CMAKE_CXX_COMPILER clang++)
  set (CMAKE_AR      "llvm-ar")
  set (CMAKE_LINKER  "llvm-ld")
  set (CMAKE_NM      "llvm-nm")
  set (CMAKE_OBJDUMP "llvm-objdump")
  set (CMAKE_RANLIB  "llvm-ranlib")
endif ()

function(add_ddsl_hpp_files)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB HPP "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/*.hpp")
	file(GLOB HPP_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/lib/*.hpp")
	file(GLOB HPP_MODEL "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/model/*.hpp")
	file(GLOB HPP_LANG "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/lang/*.hpp")
	list(APPEND SRC_FILES ${HPP} ${HPP_LIB} ${HPP_MODEL} ${HPP_LANG})
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
endfunction()

function(add_ddsl_h_files)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB H "${CMAKE_CURRENT_SOURCE_DIR}/src/h/*.h")
	file(GLOB H_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/h/lib/*.h")
	file(GLOB H_MODEL "${CMAKE_CURRENT_SOURCE_DIR}/src/h/model/*.h")
	file(GLOB H_LANG "${CMAKE_CURRENT_SOURCE_DIR}/src/h/lang/*.h")
	list(APPEND SRC_FILES ${H} ${H_LIB} ${H_MODEL} ${H_LANG})
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
endfunction()

function(add_ddsl_cpp_files)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB CPP "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/*.cpp")
	file(GLOB CPP_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/lib/*.cpp")
	file(GLOB CPP_MODEL "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/model/*.cpp")
	file(GLOB CPP_LANG "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/lang/*.cpp")
	list(APPEND SRC_FILES ${CPP} ${CPP_LIB} ${CPP_MODEL} ${CPP_LANG})
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
endfunction()

function(add_ddsl_hpp_groups)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB HPP "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/*.hpp")
	file(GLOB HPP_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/lib/*.hpp")
	file(GLOB HPP_MODEL "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/model/*.hpp")
	file(GLOB HPP_LANG "${CMAKE_CURRENT_SOURCE_DIR}/src/hpp/lang/*.hpp")
	source_group(hpp FILES ${HPP})
	source_group(hpp\\lib FILES ${HPP_LIB})
	source_group(hpp\\lang FILES ${HPP_LANG})
	source_group(hpp\\model FILES ${HPP_MODEL})
endfunction()

function(add_ddsl_h_groups)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB H "${CMAKE_CURRENT_SOURCE_DIR}/src/h/*.h")
	file(GLOB H_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/h/lib/*.h")
	file(GLOB H_MODEL "${CMAKE_CURRENT_SOURCE_DIR}/src/h/model/*.h")
	file(GLOB H_LANG "${CMAKE_CURRENT_SOURCE_DIR}/src/h/lang/*.h")
	source_group(h FILES ${H})
	source_group(h\\lib FILES ${H_LIB})
	source_group(h\\lang FILES ${H_LANG})
	source_group(h\\model FILES ${H_MODEL})
endfunction()

function(add_ddsl_cpp_groups)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB CPP "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/*.cpp")
	file(GLOB CPP_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/lib/*.cpp")
	file(GLOB CPP_MODEL "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/model/*.cpp")
	file(GLOB CPP_LANG "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/lang/*.cpp")
	source_group(cpp FILES ${CPP})
	source_group(cpp\\lib FILES ${CPP_LIB})
	source_group(cpp\\lang FILES ${CPP_LANG})
	source_group(cpp\\model FILES ${CPP_MODEL})
endfunction()

#Begin projects and libraries
if (BUILD_DDSL_NO_EXT_LIB)
	set (EXE_NAME "ddsl_no_ext_lib")
	message("Make exe ${EXE_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)
	
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_no_ext_lib/main.cpp")
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_executable(${EXE_NAME} ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()
	
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "DDSL_NO_EXT_LIB")
endif()

if (BUILD_LIBPNG_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libpng_ddsl/png_ddsl.c")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libpng_ddsl/png_ddsl.h")
	set (LIB_NAME "png_ddsl")
	message("Make lib ${LIB_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)
	include_directories (${ZLIB_INCLUDE_DIRS})
	include_directories (${PNG_INCLUDE_DIRS})
	add_library(${LIB_NAME} STATIC ${SRC_FILES})
	target_link_libraries(${LIB_NAME} ${ZLIB_LIBRARIES})
	target_link_libraries(${LIB_NAME} ${PNG_LIBRARIES})
endif()

if (BUILD_LIBSVM_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/contrib/libsvm-3.21/svm.cpp")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/contrib/libsvm-3.21/svm.h")
	set (LIB_NAME "svm_ddsl")
	message("Make lib ${LIB_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)
	add_library(${LIB_NAME} STATIC ${SRC_FILES})
endif()

if (BUILD_LIBAF_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libarrayfire_ddsl/ArrayFire_ddsl.cpp")
	list(APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libarrayfire_ddsl/ArrayFire_ddsl.h")
	
	set (LIB_NAME "af_ddsl")
	message("Make lib ${LIB_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)
	include_directories (${AF_ROOT}/include)
	add_library(${LIB_NAME} STATIC ${SRC_FILES})
	link_directories(${AF_ROOT}/lib)

	if (DDSL_CUDA_GPU)
		target_link_libraries(${LIB_NAME} afcuda)
	else()
		target_link_libraries(${LIB_NAME} afcpu)
	endif()
endif()

if (BUILD_DDSL_TESTER)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/DDSL_TESTER/main.cpp")
	if (DDSL_EXT_LIB_CAFFE)
		list(APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libcaffe_ddsl/force_link.cpp")
	endif()
	set (EXE_NAME "ddsl_tester")
	message("Make exe ${EXE_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)
	
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_executable(${EXE_NAME} ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()

	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "DDSL_TESTER")
	
	if (DDSL_EXT_LIB_PNG)
		include_directories (${CMAKE_CURRENT_LIST_DIR}/libpng_ddsl)
		include_directories (${ZLIB_INCLUDE_DIRS})
		include_directories (${PNG_INCLUDE_DIRS})
		target_link_libraries(${EXE_NAME} png_ddsl)
	endif()	
	if (DDSL_EXT_LIB_SVM)
		include_directories (${CMAKE_CURRENT_LIST_DIR}/contrib/libsvm-3.21)
		target_link_libraries(${EXE_NAME} svm_ddsl)
	endif()
	if (DDSL_EXT_LIB_AF)
		include_directories (${CMAKE_CURRENT_LIST_DIR}/libarrayfire_ddsl)
		include_directories (/usr/local/arrayfire-3/include)
		target_link_libraries(${EXE_NAME} af_ddsl)
	endif()
	if (DDSL_EXT_LIB_CAFFE)
		include_directories(${Caffe_INCLUDE_DIRS})
		include_directories(${CMAKE_CURRENT_LIST_DIR}/contrib/caffe/build) #for export.hpp
		
		target_link_libraries(${EXE_NAME} ${Caffe_LIBRARIES})
		set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS ${Caffe_DEFINITIONS})
		
		message(${Caffe_INCLUDE_DIRS})
		message(${Caffe_LIBRARIES})
	endif()
endif()

set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")

message("CXX FLAGS: ${CMAKE_CXX_FLAGS}")
message("CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")

message("EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
message("EXE_LINKER_FLAGS_DEBUG: ${CMAKE_EXE_LINKER_FLAGS_DEBUG}")

message("SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")
message("SHARED_LINKER_FLAGS_DEBUG: ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")

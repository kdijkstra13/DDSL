cmake_minimum_required(VERSION 3.5)

project(DDSL)

#build options
set(DDSL_ROOT ${CMAKE_CURRENT_LIST_DIR})

#Compiler flags for external library support
#option(DDSL_EXT_LIB "Use external libraries" ON) #Disabling all external libraries in all projects is usually not a good idea
option(DDSL_EXT_LIB_PNG "PNG support in DDSL_TESTER" OFF)
option(DDSL_EXT_LIB_SVM "SVM support in DDSL_TESTER" OFF)
option(DDSL_EXT_LIB_AF "ArrayFire support in DDSL_TESTER" OFF)
option(DDSL_EXT_LIB_CAFFE "Caffe support in DDSL_TESTER" OFF)
option(DDSL_EXT_LIB_CHAISCRIPT "Build with ChaiScript support in DDSL_TESTER" OFF)

#General options
option(OPTION_AF_GPU "Build with ArrayFire with GPU support" OFF)
option(OPTION_CAFFE_GPU "Build with Caffe with GPU support" OFF)
option(OPTION_CAFFE_NCCL "Multi-GPU support" OFF)
option(OPTION_GCC_O3 "Build using -O3 optimization" OFF)
option(OPTION_GCC_OFAST "Build using Ofast optimization" OFF)
option(OPTION_CHAI_BUILD_DDSL "Build chai ddsl interpreter with buildin DDSL support" OFF)

#Projects
option(BUILD_DDSL_NO_EXT_LIB "Build vanilla DDSL" OFF) 						#Depend on: None
option(BUILD_DDSL_TESTER "Build testing project for debugging DDSL" ON) 	#Depend on: Any (See ddsl.hpp and ddsl.h)
option(BUILD_DDSL_PYTHON_TESTER "Build testing project for using Python with DDSL" ON) 	#Depend on: Any (See ddsl.hpp and ddsl.h)
option(BUILD_LIBPNG_DDSL "Build a library for PNG" OFF) 						#Depend on: DDSL_EXT_LIB_PNG
option(BUILD_LIBSVM_DDSL "Build a library for SVM" OFF) 						#Depend on: DDSL_EXT_LIB_SVM
option(BUILD_LIBAF_DDSL "Build a library for ArrayFire" OFF) 				#Depend on: DDSL_EXT_LIB_AF
option(BUILD_LIBCAFFE_DDSL "Build a library for Caffe" OFF) 					#Depend on: DDSL_EXT_LIB_CAFFE

option(BUILD_DDSL_CHAISCRIPT "Build the ddsl chai script interpreter" OFF) 	#Depend on: DDSL_EXT_LIB_CHAISCRIPT
option(BUILD_LIBCHAI_MODULE_DDSL "Build DDSL as a chai scipt module" OFF) 	#Depend on: DDSL_EXT_LIB_CHAISCRIPT

#Set build flags
if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -bigobj -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
	set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++14 -bigobj -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
else()
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++14 -march=native -fPIC -Wno-unused-result")
	set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -pthread -std=c++14 -march=native -Wall -fPIC -Wno-unused-function -Wno-unused-result -Wno-switch -Wno-reorder" )
	if (OPTION_GCC_O3)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
		set (CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -O3")
		message("OPTION_GCC_O3")
	endif()
	if (OPTION_GCC_OFAST)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ofast")
		set (CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -Ofast")
		message("OPTION_GCC_Ofast")
	endif()
endif()
set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")

#Default settings
include_directories (${DDSL_ROOT}/src)
set (DEFAULT_DEFS "DDSL_NO_EXT_LIB_PNG" "DDSL_NO_EXT_LIB_SVM" "DDSL_NO_EXT_LIB_AF" "DDSL_NO_EXT_LIB_CAFFE" "DDSL_NO_EXT_LIB_CHAISCRIPT")

#Functions for adding library support to the projects
function(addExtLibPNG)
	message("* addExtLibPNG")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_PNG")
	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		set(ZLIB_ROOT ${DDSL_ROOT}/contrib/zlib-1.2.8)
		find_package(ZLIB REQUIRED)
		set(PNG_INCLUDE_DIRS ${DDSL_ROOT}/contrib/lpng1628)
		set(PNG_LIBRARIES ${DDSL_ROOT}/contrib/lpng1628/build/Release/libpng16.lib)
		set(PNG_LIBRARIES_DEBUG ${DDSL_ROOT}/contrib/lpng1628/build/Debug/libpng16d.lib)
		target_link_libraries(${EXE_NAME} debug ${PNG_LIBRARIES_DEBUG} optimized ${PNG_LIBRARIES})
	else()
		#sudo apt-get install libpng-dev
		#find_package(ZLIB REQUIRED)
		find_package(PNG REQUIRED)
		target_link_libraries(${EXE_NAME} ${PNG_LIBRARIES})
	endif()
	include_directories (${ZLIB_INCLUDE_DIRS})
	include_directories (${PNG_INCLUDE_DIRS})
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function(addLibPNG)
	message("* addLibPNG")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_PNG")
	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		target_link_libraries(${EXE_NAME} debug ${DDSL_ROOT}/build/Debug/png_ddsl.lib optimized ${DDSL_ROOT}/build/Release/png_ddsl.lib)
	else()
		#target_link_libraries(${EXE_NAME} ${PNG_LIBRARIES})
                target_link_libraries(${EXE_NAME} ${CMAKE_BINARY_DIR}/libpng_ddsl.a)
	endif()
	include_directories (${DDSL_ROOT}/libpng_ddsl)
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function(addPNG)
    message("* addPNG")
    list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_PNG")
    find_package(PNG REQUIRED)
    target_link_libraries(${EXE_NAME} ${CMAKE_BINARY_DIR}/libpng_ddsl.a)
    include_directories (${DDSL_ROOT}/libpng_ddsl)
    set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()

function(addExtLibSVM)
	message("* addExtLibSVM")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_SVM")
	include_directories (${DDSL_ROOT}/contrib/libsvm-3.21)
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function(addLibSVM)
	message("* addLibSVM")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_SVM")
	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		target_link_libraries(${EXE_NAME} debug ${DDSL_ROOT}/build/Debug/svm_ddsl.lib optimized ${DDSL_ROOT}/build/Release/svm_ddsl.lib)
	else()
                target_link_libraries(${EXE_NAME} ${CMAKE_BINARY_DIR}/libsvm_ddsl.a)
	endif()
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()

function (addExtLibAF)
	message("* addExtLibAF")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")

	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		set (AF_ROOT "C:/Program Files/ArrayFire/v3")
		if (OPTION_CUDA_GPU)
			target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/afcuda.lib)
		else()
			target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/afcpu.lib)
		endif()
	else()
		set (AF_ROOT "/usr/local/arrayfire-3")
		if (OPTION_AF_GPU)
			target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/libafcuda.so)
			message("** OPTION_AF_GPU=1")
		else()
			target_link_libraries(${EXE_NAME} ${AF_ROOT}/lib/libafcpu.so)
			message("** OPTION_AF_GPU=0")
		endif()
	endif()
	
	set (AF_INCLUDE_DIRS ${AF_ROOT}/include)
	include_directories (${AF_INCLUDE_DIRS})
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function (addLibAF)
	message("* addLibAF")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")
	include_directories (${DDSL_ROOT}/libarrayfire_ddsl)

	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		set (AF_ROOT "C:/Program Files/ArrayFire/v3")
		target_link_libraries(${EXE_NAME} debug ${DDSL_ROOT}/build/Debug/af_ddsl.lib optimized ${DDSL_ROOT}/build/Release/af_ddsl.lib)
	else()
		set (AF_ROOT "/usr/local/arrayfire-3")
                target_link_libraries(${EXE_NAME} ${CMAKE_BINARY_DIR}/libaf_ddsl.a)
	endif()
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function(addExtAF)
    list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")
    find_package(ArrayFire REQUIRED)
    find_package(CUDA)
    if (OPTION_CUDA_GPU AND ${ArrayFire_CUDA_FOUND} AND ${CUDA_FOUND})
        target_link_libraries(${EXE_NAME} ${ArrayFire_CUDA_LIBRARIES} ${CUDA_LIBRARIES})
    elseif(${ArrayFire_CPU_FOUND})
        target_link_libraries(${EXE_NAME} ${ArrayFire_CPU_LIBRARIES})
    endif()
    set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function(addAF)
    message("* addAF")
    list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_AF")
    include_directories (${DDSL_ROOT}/libarrayfire_ddsl)
    find_package(ArrayFire REQUIRED)
    include_directories(${ArrayFire_INCLUDE_DIRS})
    target_link_libraries(${EXE_NAME} ${ArrayFire_LIBRARIES})
    set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()

function (addExtLibChai)
	message("* addExtLibChai")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_CHAISCRIPT")

	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		include_directories (${CMAKE_CURRENT_LIST_DIR}/contrib/ChaiScript-6.0.0/include)
	else()
		include_directories (/usr/local/include)
	endif()
	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		target_link_libraries(${EXE_NAME} debug ${CMAKE_CURRENT_LIST_DIR}/contrib/ChaiScript-6.0.0/build/Debug/chaiscript_stdlib-6.0.0.lib optimized ${CMAKE_CURRENT_LIST_DIR}/contrib/ChaiScript-6.0.0/build/Release/chaiscript_stdlib-6.0.0.lib)
	else()
		target_link_libraries(${EXE_NAME} /usr/local/lib/chaiscript/libchaiscript_stdlib-6.0.0.so -ldl -lreadline)
		list(APPEND DEFS "READ_LINE_AVAILABLE")
	endif ()
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function (addLibChai)
	message("* addLibChai")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_CHAISCRIPT")
endfunction()

function (addExtLibCaffe)
	message("* addExtLibCaffe")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_CAFFE")
	if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)		
		set (OpenBLAS_DIR ${DDSL_ROOT}/contrib/openblas/lib/cmake/openblas)
		find_package(OpenBLAS REQUIRED)
		set (OpenCV_DIR $ENV{ProgramFiles}/opencv/build)
		#set (OpenCV_DIR ${DDSL_ROOT}/contrib/opencv/build)
		find_package(OpenCV REQUIRED)
		set (Caffe_DIR ${DDSL_ROOT}/contrib/caffe/build)
		find_package(Caffe REQUIRED)
		
		#Add some extra libs
		set(Caffe_LIBRARIES ${Caffe_LIBRARIES} ntdll.lib)
		set(Caffe_LIBRARIES ${Caffe_LIBRARIES} shlwapi.lib)
	else()
		find_package(OpenCV REQUIRED)
		set (Caffe_DIR ${DDSL_ROOT}/contrib/caffe/build)
		find_package(Caffe REQUIRED)
	endif()
	if (NOT OPTION_CAFFE_GPU)
		message("** OPTION_CAFFE_GPU=0")
		list(APPEND DEFS "CPU_ONLY")
	else()
		message("** OPTION_CAFFE_GPU=1")
		if (OPTION_CAFFE_NCCL)
			message("** OPTION_CAFFE_NCCL=1")
			list(APPEND DEFS "USE_NCCL")
		else()
			message("** OPTION_CAFFE_NCCL=0")
		endif()
	endif()
	include_directories (${Caffe_INCLUDE_DIRS})
	include_directories (${DDSL_ROOT}/contrib/caffe/build/install/include) #for caffe.pb.h
	include_directories (${DDSL_ROOT}/contrib/caffe/build) #for export.hpp
	
	target_link_libraries(${EXE_NAME} ${Caffe_LIBRARIES})
	list(APPEND DEFS "USE_OPENCV")
	list(APPEND SRC_FILES ${DDSL_ROOT}/libcaffe/force_link.cpp)
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()
function (addLibCaffe)
	message("* addLibCaffe")
	list(REMOVE_ITEM DEFS "DDSL_NO_EXT_LIB_CAFFE")
	set(DEFS ${DEFS} PARENT_SCOPE)
endfunction()

#files to add
function(add_ddsl_hpp_files)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB HPP "${DDSL_ROOT}/src/hpp/*.hpp")
	file(GLOB HPP_LIB "${DDSL_ROOT}/src/hpp/lib/*.hpp")
	file(GLOB HPP_MODEL "${DDSL_ROOT}/src/hpp/model/*.hpp")
	file(GLOB HPP_LANG "${DDSL_ROOT}/src/hpp/lang/*.hpp")
	list(APPEND SRC_FILES ${HPP} ${HPP_LIB} ${HPP_MODEL} ${HPP_LANG})
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
endfunction()

function(add_ddsl_h_files)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB H "${DDSL_ROOT}/src/h/*.h")
	file(GLOB H_LIB "${DDSL_ROOT}/src/h/lib/*.h")
	file(GLOB H_MODEL "${DDSL_ROOT}/src/h/model/*.h")
	file(GLOB H_LANG "${DDSL_ROOT}/src/h/lang/*.h")
	list(APPEND SRC_FILES ${H} ${H_LIB} ${H_MODEL} ${H_LANG})
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
endfunction()

function(add_ddsl_cpp_files)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB CPP "${DDSL_ROOT}/src/cpp/*.cpp")
	file(GLOB CPP_LIB "${DDSL_ROOT}/src/cpp/lib/*.cpp")
	file(GLOB CPP_MODEL "${DDSL_ROOT}/src/cpp/model/*.cpp")
	file(GLOB CPP_LANG "${DDSL_ROOT}/src/cpp/lang/*.cpp")
	list(APPEND SRC_FILES ${CPP} ${CPP_LIB} ${CPP_MODEL} ${CPP_LANG})
	set(SRC_FILES ${SRC_FILES} PARENT_SCOPE)
endfunction()

function(add_ddsl_hpp_groups)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB HPP "${DDSL_ROOT}/src/hpp/*.hpp")
	file(GLOB HPP_LIB "${DDSL_ROOT}/src/hpp/lib/*.hpp")
	file(GLOB HPP_MODEL "${DDSL_ROOT}/src/hpp/model/*.hpp")
	file(GLOB HPP_LANG "${DDSL_ROOT}/src/hpp/lang/*.hpp")

	if (MSVC)
		source_group(hpp FILES ${HPP})
		source_group(hpp\\lib FILES ${HPP_LIB})
		source_group(hpp\\lang FILES ${HPP_LANG})
		source_group(hpp\\model FILES ${HPP_MODEL})
	else()
		source_group(hpp FILES ${HPP})
		source_group(hpp/lib FILES ${HPP_LIB})
		source_group(hpp/lang FILES ${HPP_LANG})
		source_group(hpp/model FILES ${HPP_MODEL})
	endif()
endfunction()

function(add_ddsl_h_groups)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB H "${DDSL_ROOT}/src/h/*.h")
	file(GLOB H_LIB "${DDSL_ROOT}/src/h/lib/*.h")
	file(GLOB H_MODEL "${DDSL_ROOT}/src/h/model/*.h")
	file(GLOB H_LANG "${DDSL_ROOT}/src/h/lang/*.h")

	if (MSVC)
		source_group(h FILES ${H})
		source_group(h\\lib FILES ${H_LIB})
		source_group(h\\lang FILES ${H_LANG})
		source_group(h\\model FILES ${H_MODEL})
	else()
		source_group(h FILES ${H})
		source_group(h/lib FILES ${H_LIB})
		source_group(h/lang FILES ${H_LANG})
		source_group(h/model FILES ${H_MODEL})
	endif()
endfunction()

function(add_ddsl_cpp_groups)
	set(REL ${CMAKE_BINARY_DIR})
	file(GLOB CPP "${DDSL_ROOT}/src/cpp/*.cpp")
	file(GLOB CPP_LIB "${DDSL_ROOT}/src/cpp/lib/*.cpp")
	file(GLOB CPP_MODEL "${DDSL_ROOT}/src/cpp/model/*.cpp")
	file(GLOB CPP_LANG "${DDSL_ROOT}/src/cpp/lang/*.cpp")

	if (MSVC)
		source_group(cpp FILES ${CPP})
		source_group(cpp\\lib FILES ${CPP_LIB})
		source_group(cpp\\lang FILES ${CPP_LANG})
		source_group(cpp\\model FILES ${CPP_MODEL})
	else()
		source_group(cpp FILES ${CPP})
		source_group(cpp/lib FILES ${CPP_LIB})
		source_group(cpp/lang FILES ${CPP_LANG})
		source_group(cpp/model FILES ${CPP_MODEL})
	endif()
endfunction()

#Begin projects and libraries
if (BUILD_DDSL_NO_EXT_LIB)
	set (EXE_NAME "ddsl_no_ext_lib")
	message("Make exe ${EXE_NAME}")
	
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_no_ext_lib/main.cpp")
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_executable(${EXE_NAME} ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()

	set(DEFS ${DEFAULT_DEFS})
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

if (BUILD_DDSL_CHAISCRIPT)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/main.cpp")
	set(DEFS ${DEFAULT_DEFS})
	if (OPTION_CHAI_BUILD_DDSL)
		list (APPEND DEFS "OPTION_CHAI_BUILD_DDSL")
 	    list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_Chai.h")
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_Chai.cpp")	
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiMatrix.h")
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiMatrix.cpp")
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiTable.h")
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiTable.cpp")
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiModel.h")
		list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiModel.cpp")
	endif()
	
	set (EXE_NAME "ddsl")
	message("Make exe ${EXE_NAME}")
	include_directories(${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript)
	
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_executable(${EXE_NAME} ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()
    
	addExtLibChai()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

if (BUILD_LIBCHAI_MODULE_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_Chai.h")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_Chai.cpp")	
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiMatrix.h")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiMatrix.cpp")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiTable.h")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiTable.cpp")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiModel.h")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript/DS_ChaiModel.cpp")
	
	set (EXE_NAME "chaiscript_ddsl")
	message("Make shared lib ${EXE_NAME}")
	include_directories(${CMAKE_CURRENT_LIST_DIR}/ddsl_chaiscript)

	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_library(${EXE_NAME} SHARED ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()
    
	set(DEFS ${DEFAULT_DEFS})
	addExtLibChai()
	#addExtLibPNG()
        #addPNG()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

if (BUILD_LIBPNG_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libpng_ddsl/png_ddsl.c")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libpng_ddsl/png_ddsl.h")
	set (EXE_NAME "png_ddsl")
	message("Make lib ${EXE_NAME}")
		
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_library(${EXE_NAME} STATIC ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()
    
	set(DEFS ${DEFAULT_DEFS})
	addExtLibPNG()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

if (BUILD_LIBSVM_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/contrib/libsvm-3.21/svm.cpp")
	list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/contrib/libsvm-3.21/svm.h")
	set (EXE_NAME "svm_ddsl")
	message("Make lib ${EXE_NAME}")
		
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_library(${EXE_NAME} STATIC ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()
    
	set(DEFS ${DEFAULT_DEFS})
	addExtLibSVM()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

if (BUILD_LIBAF_DDSL)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libarrayfire_ddsl/ArrayFire_ddsl.cpp")
	list(APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libarrayfire_ddsl/ArrayFire_ddsl.h")
	set (EXE_NAME "af_ddsl")
	message("Make lib ${EXE_NAME}")

	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_library(${EXE_NAME} STATIC ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()
    
	set(DEFS ${DEFAULT_DEFS})
        addExtAF()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")	
endif()


if (BUILD_DDSL_TESTER)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_tester/main.cpp")
	#if (DDSL_EXT_LIB_CAFFE)
	#	list(APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libcaffe_ddsl/force_link.cpp")
	#endif()
	set (EXE_NAME "ddsl_tester")
	message("Make exe ${EXE_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)
	
	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_executable(${EXE_NAME} ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()

	#set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "DDSL_TESTER")

	set(DEFS ${DEFAULT_DEFS})
	if (DDSL_EXT_LIB_PNG)
		addExtLibPNG()
                addPNG()
		if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
			target_link_libraries(${EXE_NAME} "png")
		endif()
	endif()	
	if (DDSL_EXT_LIB_SVM)
		addExtLibSVM()
		addLibSVM()
	endif()
	if (DDSL_EXT_LIB_AF)
                addExtAF()
                addAF()
	endif()
	if (DDSL_EXT_LIB_CAFFE)
		addExtLibCaffe()
		addLibCaffe()
	endif()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")	
endif()


if (BUILD_DDSL_PYTHON_TESTER)
	set (SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_python_tester/main.cpp")
    list (APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/ddsl_python_tester/cnpy.cpp")


    find_package(PythonLibs REQUIRED)
    include_directories(${PYTHON_INCLUDE_DIRS})
    target_link_libraries(${EXE_NAME} ${PYTHON_LIBRARIES})
	#if (DDSL_EXT_LIB_CAFFE)
	#	list(APPEND SRC_FILES "${CMAKE_CURRENT_LIST_DIR}/libcaffe_ddsl/force_link.cpp")
	#endif()
	set (EXE_NAME "ddsl_python_tester")
	message("Make exe ${EXE_NAME}")
	include_directories (${CMAKE_CURRENT_LIST_DIR}/src)

	add_ddsl_h_files()
	add_ddsl_hpp_files()
	add_executable(${EXE_NAME} ${SRC_FILES})
	add_ddsl_h_groups()
	add_ddsl_hpp_groups()

	#set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "DDSL_TESTER")

	set(DEFS ${DEFAULT_DEFS})
	if (DDSL_EXT_LIB_PNG)
		addExtLibPNG()
                addPNG()
		if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
			target_link_libraries(${EXE_NAME} "png")
		endif()
	endif()
	if (DDSL_EXT_LIB_SVM)
		addExtLibSVM()
		addLibSVM()
	endif()
	if (DDSL_EXT_LIB_AF)
                addExtAF()
                addAF()
	endif()
	if (DDSL_EXT_LIB_CAFFE)
		addExtLibCaffe()
		addLibCaffe()
	endif()
	set_target_properties(${EXE_NAME} PROPERTIES COMPILE_DEFINITIONS "${DEFS}")
endif()

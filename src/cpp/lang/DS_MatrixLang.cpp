#include "hpp/lang/DS_MatrixLang.hpp"

#ifdef MSVC_VER
#pragma warning(push)
#pragma warning(disable: 4244)
#endif

#include "hpp/lib/DS_Matrix.hpp"

namespace DSLang {
	//T = DSTypes::Double, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::Double,  DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	template DSLib::Matrix<DSTypes::Double,  DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::Double &rhs);
	//template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::Double &rhs);
	//template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::UInt32, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::UInt32 &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::UInt32 &rhs);
	//template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	//template DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::UInt32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::Int32, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::Int32 &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::Int32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::String, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::String &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::String &rhs);
	//template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	//template DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	//template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::String, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::String, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::DataType, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::DataType &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::DataType &rhs);
	//template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	//template DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::DataType &rhs);
	//template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::DataType, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::ContentType, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::Double, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::ContentType &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::ContentType &rhs);
	//template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	//template DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	////template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::ContentType &rhs);
	//template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::ContentType, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::VoidPointer, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::VoidPointer &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::VoidPointer &rhs);
	//template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	//template DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::VoidPointer &rhs);
	//template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::VoidPointer, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::MatrixDouble, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::MatrixDouble &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::MatrixDouble &rhs);
	//template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	//template DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);

	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::MatrixDouble &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixDouble, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::MatrixUInt32, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::MatrixUInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::MatrixUInt32 &rhs);
	//template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	//template DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);

	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixUInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixUInt32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::MatrixInt32, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::MatrixInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::MatrixInt32 &rhs);
	//template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	//template DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);

	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::MatrixInt32 &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);

	template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator~(const DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixInt32, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);

	//T = DSTypes::MatrixString, TInt = DSTypes::UInt32
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator+=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator*=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator|=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator^=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator!(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator*(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator|=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator^=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator+=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator*=(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator!(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator|(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator^(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator|(DSTypes::DataType lhs, const DSTypes::MatrixString &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator^(DSTypes::DataType lhs, const DSTypes::MatrixString &rhs);
	//template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator|(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator^(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	//template DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);

	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator==(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator!=(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<=(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>=(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator<(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::UInt32, DSTypes::UInt32> operator>(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator&&(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator||(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator&&(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator||(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);

	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator+(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator-(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator/(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator*(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & pow(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator%(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator+(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator-(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator/(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator*(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> pow(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::MatrixString &rhs);
	//template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> operator%(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);

	template  DSTypes::UInt32 operator~(const DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator++(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> && operator++(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator--(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, int);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> && operator--(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, int);

	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, std::ostream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, std::istream &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator >> (DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> && operator >> (DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> & operator<<(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &lhs, const DSTypes::String &rhs);
	template  DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> && operator<<(DSLib::Matrix<DSTypes::MatrixString, DSTypes::UInt32> &&lhs, const DSTypes::String &rhs);
};

#ifdef MSVC_VER
#pragma warning(pop)
#endif
